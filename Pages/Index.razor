@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject IMessageService messageService
@page "/"
@using System.Text;
@using System.Text.RegularExpressions
@using BoGLWeb.EditorHelper
@using BoGLWeb.DifferentialEquationHelper
@using BoGLWeb.Json
@using Newtonsoft.Json

<PageTitle>BoGL Web</PageTitle>

<script suppress-error="BL9992" type="module" src="/build/build.js"></script>

<body oncontextmenu="return false;">
<div class="page">
<main>
<AntContainer/>
<Menu Selectable=false Mode=MenuMode.Horizontal TriggerSubMenuAction=Trigger.Click>
    <li class="ant-menu-submenu ant-menu-submenu-horizontal boglLogo">
        <img src="images/logo.png" width="50"/>
    </li>
    <SubMenu title="File" Class="topMenu" Key="File">
        <span id="fileMenu"></span>
        <MenuItem Key="setting:1" OnClick="openBoGLFile">
            <label for="fileUpload" class="customFileUpload">
                Open
            </label>
            <input id="fileUpload" type="file" accept=".bogl" />
        </MenuItem>
        <MenuItem Key="setting:2" OnClick="save">Save</MenuItem>
        <MenuItem Key="setting:3" OnClick="saveAs">Save As</MenuItem>
        <MenuItem Key="setting:4" OnClick="exportAsImage">Export Current Tab as Image</MenuItem>
        <MenuItem Key="setting:5" OnClick="generateUrl">Generate URL</MenuItem>
    </SubMenu>
    <SubMenu title="Edit" Class="topMenu" Key="Edit">
        <span id="editMenu"></span>
        <MenuItem Key="setting:1" OnClick="Cut">Cut</MenuItem>
        <MenuItem Key="setting:2" OnClick="Copy">Copy</MenuItem>
        <MenuItem Key="setting:3" OnClick="Paste">Paste</MenuItem>
        <MenuItem Key="setting:4" OnClick="Undo">Undo</MenuItem>
        <MenuItem Key="setting:5" OnClick="Redo">Redo</MenuItem>
        <MenuItem Key="setting:6" OnClick="Delete">Delete</MenuItem>
        <MenuItem Key="setting:7" OnClick="Clear">Clear System Diagram</MenuItem>
    </SubMenu>
    <SubMenu title="Help" Class="topMenu" Key="Help">
        <span id="helpMenu"></span>
        <MenuItem Key="setting:1">
            <Checkbox @bind-Checked="deleteManyChecked">Confirm deleting many items</Checkbox>
        </MenuItem>
        <MenuItem Key="setting:2" OnClick="runTutorial">Tutorial</MenuItem>
        <SubMenu Title="Example Files">
            <span id="exampleMenu"></span>
            <SubMenu Title="Mechanical Translation">
                <span id="mechTransMenu"></span>
                <MenuItem Key="mt:1" OnClick='() => loadExample("basic-two-mass-system")'>Basic Two Mass System - 1</MenuItem>
                <MenuItem Key="mt:2" OnClick='() => loadExample("basic-two-mass-system1")'>Basic Two Mass System - 2</MenuItem>
                <MenuItem Key="mt:3" OnClick='() => loadExample("basic-two-mass-system2")'>Basic Two Mass System - 3</MenuItem>
                <MenuItem Key="mt:4" OnClick='() => loadExample("masses_on_a_spring")'>Quarter Car Model</MenuItem>
                <MenuItem Key="mt:5" OnClick='() => loadExample("moving_masses")'>Basic Mass, Spring System with Directions</MenuItem>
                <MenuItem Key="mt:6" OnClick='() => loadExample("spring_&_damper")'>Spring and Damper with Force</MenuItem>
            </SubMenu>
            <SubMenu Title="Mechanical Rotation">
                <span id="mechRotMenu"></span>
                <MenuItem Key="mr:1" OnClick='() => loadExample("rack_pinion")'>Rack and Pinion System</MenuItem>
                <MenuItem Key="mr:2" OnClick='() => loadExample("motor-gear-pair")'>Motor, Shaft and Gear Pair</MenuItem>
            </SubMenu>
            <SubMenu Title="Electrical">
                <span id="elecMenu"></span>
                <MenuItem Key="elec:1" OnClick='() => loadExample("lrc_circuit")'>LRC Circuit</MenuItem>
            </SubMenu>
        </SubMenu>
        <MenuItem Key="setting:4" OnClick="reportBugs">Report Bugs</MenuItem>
        <MenuItem Key="setting:5" OnClick="OpenAboutModal">About BoGL</MenuItem>
    </SubMenu>
    <li class="ant-menu-submenu ant-menu-submenu-horizontal iconDiv" id="iconButtons">
        @{
            RenderFragment SaveSvg = @<img class="menuIcon" src="images/menuBar/save.png" title="Save"/>;
            RenderFragment CutSvg = @<img class="menuIcon" src="images/menuBar/cut.png" title="Cut"/>;
            RenderFragment CopySvg = @<img class="menuIcon" src="images/menuBar/copy.png" title="Copy"/>;
            RenderFragment PasteSvg = @<img class="menuIcon" src="images/menuBar/paste.png" title="Paste"/>;
            RenderFragment UndoSvg = @<img class="menuIcon" src="images/menuBar/undo.png" title="Undo"/>;
            RenderFragment RedoSvg = @<img class="menuIcon" src="images/menuBar/redo.png" title="Redo"/>;
            RenderFragment TrashSvg = @<img class="menuIcon" src="images/menuBar/trash.png" title="Trash"/>;
            RenderFragment ClearSvg = @<img class="menuIcon" src="images/menuBar/clear.png" title="Clear System Diagram"/>;
        }
        <Button Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small" OnClick="save">
            <Icon Component="SaveSvg"/>
        </Button>
        <Button Disabled='currTab != "1" || !isSelecting' OnClick="Cut" Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
            <Icon Component="CutSvg"/>
        </Button>
        <Button Disabled='currTab != "1" || !isSelecting' OnClick="Copy" Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
            <Icon Component="CopySvg"/>
        </Button>
        <Button Disabled='currTab != "1" || !hasCopiedSelection' OnClick="Paste" Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
            <Icon Component="PasteSvg"/>
        </Button>
        <Button Shape="Square" Disabled="@disableUndo" Type="@ButtonType.Text" Size="@ButtonSize.Small" OnClick="Undo">
            <Icon Component="UndoSvg"/>
        </Button>
        <Button Shape="Square" Disabled="@disableRedo" Type="@ButtonType.Text" Size="@ButtonSize.Small" OnClick="Redo">
            <Icon Component="RedoSvg"/>
        </Button>
        <Button Disabled='currTab != "1" || !isSelecting' OnClick="Delete" Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
            <Icon Component="TrashSvg"/>
        </Button>
        <Button Disabled='currTab != "1"' OnClick="Clear" Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
            <Icon Component="ClearSvg"/>
        </Button>
    </li>
</Menu>
<div class="pageContainer">
    <div id="graphMenu">
        <div id="blankMenu" style="@("display: " + (currTab == "2" || currTab == "3" ? "block" : "none"))"></div>
        <Collapse Id="elementMenus" style="@("display: " + (currTab == "1" ? "block" : "none"))" Bordered="false">
            <ExpandIconTemplate>
                <Icon Type="down-circle" Rotate="@(context ? 180 : 0)"/>
            </ExpandIconTemplate>
            <ChildContent>
                <Panel Header="Basic Mechanical Translation" Key="1">
                    <div id="mechTrans" class="elementHolder"></div>
                </Panel>
                <Panel Header="Basic Mechanical Rotation" Key="2">
                    <div id="mechRot" class="elementHolder"></div>
                </Panel>
                <Panel Header="Transmission Elements" Key="3">
                    <div id="transElem" class="elementHolder"></div>
                </Panel>
                <Panel Header="Electrical" Key="3">
                    <div id="electrical" class="elementHolder"></div>
                </Panel>
                <Panel Header="Actuators" Key="3">
                    <div id="actuators" class="elementHolder"></div>
                </Panel>
            </ChildContent>
        </Collapse>
        <div id="diffeqMenu" style="@("display: " + (currTab == "4" && showEquations ? "flex" : "none"))">
            <Button Class="bogl_button_large" OnClick="@(() => { showEquations = false; })">Show State Variables</Button>
            <h2>Differential Equation @(diffIndex + 1)</h2>
            <sub>@stateEquationsStored.Length equations total</sub>
            <Select Id="equationSelect"
                    TItem="Option"
                    TItemValue="int"
                    DataSource="@equationSwitchOptions"
                    @bind-Value="@selectedEquation"
                    DefaultValue="@(0)"
                    ValueName="@nameof(Option.value)"
                    LabelName="@nameof(Option.label)"
                    Style="width:160px; margin-bottom: 15px"
                    OnSelectedItemChanged="ChangeEquationOption">
            </Select>
            @if(stateEquationsStored.Length > 0) {
                <p>Intermediate steps<br />coming soon!</p>
                <hr id="diffeqHR" />
                <p id="finalEquation"></p>
                renderEquations(new string[] { "finalEquation" }, new string[] { stateEquationsStored[diffIndex] });
            }
            <div id="latexTest"></div>
        </div>
        <div id="stateVarMenu"  style="@("display: " + (currTab == "4" && !showEquations ? "flex" : "none"))">
            <Button Class="bogl_button_large" OnClick="@(() => { showEquations = true; })">Show State Equations</Button>
            <h2>State Variables</h2>
            <div style="display: flex; flex-direction: column">
                @foreach (var v in @equationOptions) {
                    <span>@v</span>
                }
            </div>
        </div>
        <div class="resizer"></div>
    </div>
    <div class="card-container">
        <div id="zoomMenu">
            <Collapse Bordered="false" ExpandIconPosition="right" DefaultActiveKey="@(new[] { "1" })">
                <ChildContent>
                    <Panel Header="Zoom" Key="1">
                        <div id="plusLabel" class="sliderLabel">+</div>
                        <div id="minusLabel" class="sliderLabel">-</div>
                        <Slider Value="@zoomValue" TValue="double" Vertical DefaultValue="100" TooltipPlacement="AntDesign.Placement.Left" Min="25" Max="175" OnChange="SliderChange" OnAfterChange="SliderChange"/>
                        <Button Type="@ButtonType.Primary" Class="bogl_button" OnClick="e => { SliderChange(100); }">Reset</Button>
                    </Panel>
                </ChildContent>
                <ExpandIconTemplate>
                    <Icon Type="down-circle" Rotate="@(context ? 0 : 180)" Style="margin-top: 0; margin-right: 2px"/>
                </ExpandIconTemplate>
            </Collapse>
        </div>
        <span class="@(tabsDisabled ? "tabsDisabled" : "tabsEnabled")">
            <Tabs Type="@TabType.Card" OnTabClick="e => { TabChange(e); }">
                <TabPane Key="1" Tab="System" Style="position: relative" ForceRender=true>
                    <div id="modifierMenu">
                        <Collapse Bordered="false" ExpandIconPosition="right" DefaultActiveKey="@(new[] { "1" })">
                            <ChildContent>
                                <Panel Header="Modifers" Key="1" Id="modifierPanel">
                                    <div id="modifierCheckboxWrapper">
                                        @{
                                            RenderFragment settingsIcon = @<Button Class="settingButton" Size="small"><Icon Type="setting" Theme="fill" Style="color: #5A5A5A"/></Button>;
                                        }
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[0]" Indeterminate="@checkIndeterminate[0]" Disabled="@disabledValues[0]" OnChange="b => { CheckChange(b, 0); }">
                                            <div style="display: flex; align-items: center;">@("Mass")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[1]" Indeterminate="@checkIndeterminate[1]" Disabled="@disabledValues[1]" OnChange="b => { CheckChange(b, 1); }">
                                            <div style="display: flex; align-items: center;">@("Inertia")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[2]" Indeterminate="@checkIndeterminate[2]" Disabled="@disabledValues[2]" OnChange="b => { CheckChange(b, 2); }">
                                            <div style="display: flex; align-items: center;">@("Stiffness")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[3]" Indeterminate="@checkIndeterminate[3]" Disabled="@disabledValues[3]" OnChange="b => { CheckChange(b, 3); }">
                                            <div style="display: flex; align-items: center;">@("Friction")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[4]" Indeterminate="@checkIndeterminate[4]" Disabled="@disabledValues[4]" OnChange="b => { CheckChange(b, 4); }">
                                            <div style="display: flex; align-items: center;">@("Damping")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[5]" Indeterminate="@checkIndeterminate[5]" Disabled="@disabledValues[5]" OnChange="b => { CheckChange(b, 5); }">
                                            <div style="display: flex; align-items: center;">@("Parallel")</div>
                                        </Checkbox>
                                        <Checkbox Style="padding-right: 0px" Checked="@checkValues[6]" Indeterminate="@checkIndeterminate[6]" Disabled="@disabledValues[6]" OnChange="b => { CheckChange(b, 6); }">
                                            <div style="display: flex; align-items: center;">@("Tooth Wear")</div>
                                        </Checkbox>
                                    </div>
                                    <hr/>
                                    <div>
                                        <div style="font-size: 12px">Velocity Direction</div>
                                        <div id="velocities">
                                            <div id="clearVelocityWrapper">
                                                <Button Disabled="@velocityDisabled" Class="bogl_button" OnClick="b => { ChangeVelocity(0); }">
                                                    Clear
                                                    <br/>Velocity
                                                </Button>
                                            </div>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(1) ? "selectedVelocity " : "") + "longArrow")" OnClick="b => { ChangeVelocity(1); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -30px; left: 17px">
                                                <div class="arrowButton topArrow">⮢</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(2) ? "selectedVelocity " : "") + "longArrow")" OnClick="b => { ChangeVelocity(2); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -30px; right: 17px">
                                                <div class="arrowButton topArrow">⮣</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(3) ? "selectedVelocity " : "") + "tallArrow")" OnClick="b => { ChangeVelocity(3); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -4px; right: -8px">
                                                <div class="arrowButton sideTopArrow">⮥</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(4) ? "selectedVelocity " : "") + "tallArrow")" OnClick="b => { ChangeVelocity(4); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 34px; right: -8px">
                                                <div class="arrowButton">⮧</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(5) ? "selectedVelocity " : "") + "longArrow")" OnClick="b => { ChangeVelocity(5); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 62px; right: 12px">
                                                <div class="arrowButton bottomArrow">⮡</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(6) ? "selectedVelocity " : "") + "longArrow")" OnClick="b => { ChangeVelocity(6); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 62px; left: 22px">
                                                <div class="arrowButton bottomArrow">⮠</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(7) ? "selectedVelocity " : "") + "tallArrow")" OnClick="b => { ChangeVelocity(7); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 34px; left: -8px">
                                                <div class="arrowButton">⮦</div>
                                            </Button>
                                            <Button Disabled="@velocityDisabled" Class="@((selectedVelocity.Contains(8) ? "selectedVelocity " : "") + "tallArrow")" OnClick="b => { ChangeVelocity(8); }" Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -4px; left: -8px">
                                                <div class="arrowButton sideTopArrow">⮤</div>
                                            </Button>
                                        </div>
                                    </div>
                                </Panel>
                            </ChildContent>
                            <ExpandIconTemplate>
                                <Icon Type="down-circle" Rotate="@(context ? 180 : 0)" Style="margin-top: 0; margin-right: 2px"/>
                            </ExpandIconTemplate>
                        </Collapse>
                    </div>
                    <Button Type="@ButtonType.Primary" Id="generateButton" Disabled="!allRulesLoaded || generatingBondGraph" Class="bogl_button" @onclick="generateButtonClicked">Generate</Button>
                    @if (generatingBondGraph) {
                        <p id="generateProgressText">Processing System Diagram:</p>
                        <Progress id="generateProgress" Percent=@generateProgress ShowInfo="false" TrailColor="#ededed"/>
                    }
                    @if (!allRulesLoaded) {
                        <p id="ruleLoadProgressText">Preparing Generation:</p>
                        <Progress id="ruleLoadProgress" Percent=@loadPercent ShowInfo="false" TrailColor="#ededed"/>
                    }
                    <div id="systemDiagram"></div>
                </TabPane>
                <TabPane Disabled="tabsDisabled" Key="2" Tab="Unsimplified BG" ForceRender=true>
                    <div id="unsimpBG"></div>
                </TabPane>
                <TabPane Disabled="tabsDisabled" Key="3" Tab="Simplified BG" ForceRender=true>
                    <div id="simpBG"></div>
                </TabPane>
                <TabPane Disabled="tabsDisabled" Key="4" Tab="Causal BG" ForceRender=true>
                    <Select Id="causalSelect"
                            TItem="Option"
                            TItemValue="int"
                            DataSource="@causalSwitchOptions"
                            @bind-Value="@selectedCausalOption"
                            DefaultValue="@(0)"
                            ValueName="@nameof(Option.value)"
                            LabelName="@nameof(Option.label)"
                            Style="width:120px"
                            OnSelectedItemChanged="ChangeCausalOption">
                    </Select>
                    <div id="causalBG"></div>
                </TabPane>
            </Tabs>
        </span>
    </div>
</div>
</main>
</div>
<Modal Title="About BoGL Web" Visible="@visible" OnOk="@handleOk" OnCancel="@handleOk">
    <div class="modal-body">
        <p>BoGL Web Developed by:</p>
        <p>Margaret Earnest</p>
        <p>Jakob Misbach</p>
        <p>Anthony Vuolo</p>
        <p>Original application developed by:</p>
        <p>Daniel Grande</p>
        <p>Felice Mancini</p>
        <p>Corey Alicchio</p>
        <p>Justin Vitiello</p>
        <p>Terry Hearst</p>
        <p>Talal Jaber</p>
        <p>Corrin Courville</p>
        <p>Advisors:</p>
        <p>Prof. David Brown</p>
        <p>Prof. Pradeep Radhakrishan</p>
        <p>Prof. Brigitte Servatius</p>
    </div>
</Modal>
<Modal Title="@errorTitle" Visible="@errorVisible" OnOk="@handleErrorOk" OnCancel="@handleErrorOk">
    <div class="modal-body">
        <p>@errorMessage</p>
    </div>
</Modal>
    @{
        RenderFragment urlFooter = @<Button OnClick="@closeUrlModal">Close</Button>;
    }
    <Modal Title="Share SystemDiagram URL" Footer="@urlFooter" Visible="@urlModalVisible" OnCancel="@closeUrlModal">
    <div style="display: flex">
        <Input style="margin-right: 10px" DefaultValue="@url" TValue="string" ReadOnly/>
        <Button @onclick="copyUrl"><Icon Type="copy" Theme="outline"/> Copy Link</Button>
    </div>
</Modal>
<Modal Title="Confirm Deleting Many Items" Visible="@confirmDeleteModalVisible" OnOk="@handleDeleteOk" OnCancel="@handleDeleteCancel">
    <p>You are about to delete many items. Please confirm that this is what you want to do. You can disable this warning in the help menu.</p>
</Modal>
</body>

@code {
    private bool generatingBondGraph;

    public static Index? app;

    public class Option {
        public string label { get; set; }
        public int value { get; set; }
    }

    static bool tabsDisabled = true;
    static bool disableUndo = true;
    static bool disableRedo = true;
    static int diffIndex = 0;

    List<Option> causalSwitchOptions = new List<Option> { };
    int selectedCausalOption;
    List<string> causalOptions = new();
    static string[] equationOptions = new string[] { };
    List<Option> equationSwitchOptions = new List<Option> { };
    int selectedEquation;
    static double zoomValue = 100;
    static List<int> selectedVelocity = new List<int> { };
    static bool velocityDisabled = true;
    string currTab = "1";
    static bool isSelecting = false;
    static bool hasCopiedSelection = false;
    static bool showEquations = false;
    string[] stateEquationsStored = new string[] { };

    public Index() {
        app = this;
    }

    private static bool[] checkValues { get; set; } = { false, false, false, false, false, false, false };
    private static bool[] checkIndeterminate { get; set; } = { false, false, false, false, false, false, false };
    private static bool[] disabledValues { get; set; } = { true, true, true, true, true, true, true };

    [JSInvokable]
    // handles a command to undo or redo in a given tab
    public static async void UndoRedoHandler(int tab, bool isUndo) {
        CanvasChange? cc = EditStackHandler.undoRedoHandler.Do(tab, isUndo);
        switch(cc?.GetType().Name) {
            case nameof(CanvasChange.AddSelection):
                CanvasChange.AddSelection addS = (CanvasChange.AddSelection) cc;
                app?.URDoAddSelection(addS.GetNewObjects(), addS.GetIDs(), addS.GetPrevSelectedEdges(), addS.GetHighlight(), isUndo);
                break;
            case nameof(CanvasChange.DeleteSelection):
                CanvasChange.DeleteSelection ds = (CanvasChange.DeleteSelection) cc;
                app?.URDoDeleteSelection(ds.GetDeletedJSONElements(), ds.GetUnselectedEdges(), isUndo);
                break;
            case nameof(CanvasChange.ChangeSelection):
                CanvasChange.ChangeSelection cs = (CanvasChange.ChangeSelection) cc;
                app?.URDoChangeSelection(cs.GetNewElementIDs(), cs.GetNewEdgeIDs(), cs.GetIDs(), cs.GetOldEdgeIDs(), isUndo);
                break;
            case nameof(CanvasChange.ChangeModifier):
                CanvasChange.ChangeModifier cm = (CanvasChange.ChangeModifier) cc;
                app?.URDoChangeSelectionModifier(cm.GetIDs(), cm.GetModID(), cm.GetToggle(), cm.GetCurrent(), isUndo);
                break;
            case nameof(CanvasChange.MoveSelection):
                CanvasChange.MoveSelection ms = (CanvasChange.MoveSelection) cc;
                app?.URDoMoveSelection(ms.GetIDs(), ms.GetXOffset(), ms.GetYOffset(), isUndo);
                break;
            case nameof(CanvasChange.ChangeVelocity):
                CanvasChange.ChangeVelocity cv = (CanvasChange.ChangeVelocity) cc;
                app?.URDoChangeSelectionVelocity(cv.GetIDs(), cv.GetEdgeIDs(), cv.GetNewVelID(), cv.GetOldIDs(), isUndo);
                break;
        }
        disableRedo = !EditStackHandler.undoRedoHandler.CanDo(tab, false);
        disableUndo = !EditStackHandler.undoRedoHandler.CanDo(tab, true);
        app?.StateHasChanged();
    }

    // undo command
    public async void Undo()
    {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("handleUndoRedo", true);
    }

    // redo command
    public async void Redo()
    {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("handleUndoRedo", false);
    }

    // cut command
    public async void Cut() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("cut");
    }

    // copy command
    public async void Copy() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("copy");
    }

    // paste command
    public async void Paste() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("paste");
    }

    static bool deleteManyChecked = true;

    // delete command
    public async void Delete() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("delete");
    }

    // clear command
    public async void Clear() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Edit");
        await module.InvokeVoidAsync("clear");
    }

    [JSInvokable]
    // records an add selection undo/redo object
    public static void URAddSelection(string[] newObjects, int[] prevSelectedElements, string[] prevSelectedEdges, bool highlight) {
        //Console.WriteLine("Recording elements and edgesBySource added: [" + String.Join(", ", newObjects) + "], [" + String.Join(", ", prevSelectedElements) + "], [" + String.Join(", ", prevSelectedEdges) + "] " + highlight.ToString());
        EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.AddSelection(prevSelectedElements, newObjects, prevSelectedEdges, highlight), 1);
        UpdateBackendWithInitialStackChange(1);
        app?.StateHasChanged();
    }

    [JSInvokable]
    // records a delete selection undo/redo object
    public static void URDeleteSelection(string[] deletedObjects, string[] unselectedDeletedEdges) {
        //Console.WriteLine("Recording elements and edgesBySource deleted: [" + String.Join(", ", deletedObjects) + "], [" + String.Join(", ", unselectedDeletedEdges) + "]");
        // adds unselected deleted edges
        EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.DeleteSelection(new int[0], deletedObjects, unselectedDeletedEdges), 1);
        UpdateBackendWithInitialStackChange(1);
        app?.StateHasChanged();
    }

    [JSInvokable]
    // records a selection change undo/redo object
    public static void URChangeSelection(int tabID, int[] addElToSelection, string[] addEdgeToSelection, int[] removeElFromSelection, string[] removeEdgeFromSelection) {
        if (addEdgeToSelection.Length > 0 || removeEdgeFromSelection.Length > 0 || addElToSelection.Length > 0 || removeElFromSelection.Length > 0) {
            //Console.WriteLine("Recording selection change: " + tabID + ", [" + String.Join(", ", addElToSelection) + "], ["
            //+ String.Join(", ", addEdgeToSelection) + "], [" + String.Join(", ", removeElFromSelection) + "], ["
            //+ String.Join(", ", removeEdgeFromSelection) + "]");
            EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.ChangeSelection(removeElFromSelection, addElToSelection, removeEdgeFromSelection, addEdgeToSelection), tabID);
            UpdateBackendWithInitialStackChange(tabID);
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // records a modifier change undo/redo object
    public static void URChangeSelectionModifier(int[] elIDs, int modID, bool modVal, bool[] prevModVals) {
        //Console.WriteLine("Recording modifer change: [" + String.Join(", ", elIDs) + "], " + modID + ", " + modVal + ", [" + String.Join(", ", prevModVals) + "]");
        EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.ChangeModifier(elIDs, modID, modVal, prevModVals), 1);
        UpdateBackendWithInitialStackChange(1);
        app?.StateHasChanged();
    }

    [JSInvokable]
    // records a selection movement undo/redo object
    public static void URMoveSelection(int tabID, int[] elements, float xOffset, float yOffset) {
        //Console.WriteLine("Recording selection movement: " + tabID + ", [" + String.Join(", ", elements) + "], " + xOffset + ", " + yOffset);
        EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.MoveSelection(elements, xOffset, yOffset), tabID);
        UpdateBackendWithInitialStackChange(tabID);
        app?.StateHasChanged();
    }

    [JSInvokable]
    // records a velocity change undo/redo object
    public static void URChangeSelectionVelocity(int[] elIDs, string[] edgeIDs, int velID, int[] prevVelVals) {
        //Console.WriteLine("Recording new velocity change: [" + String.Join(", ", elIDs) + "], [" + String.Join(", ", edgeIDs) + "], " + velID
        //    + ", [" + String.Join(", ", prevVelVals) + "]");
        EditStackHandler.undoRedoHandler.AddEdit(new CanvasChange.ChangeVelocity(elIDs, edgeIDs, velID, prevVelVals), 1);
        UpdateBackendWithInitialStackChange(1);
        app?.StateHasChanged();
    }

    // updates the backend for a given tab
    public static void UpdateBackendWithInitialStackChange(int tab) {
        if(tab == 1) { // system diagram
            EditStackHandler.undoRedoHandler.GetChange(1)?.ExecuteUpdate(EditStackHandler.undoRedoHandler.GetSystemDiagram(), false);
        } else { // bond graph
            EditStackHandler.undoRedoHandler.GetChange(tab)?.ExecuteUpdate(EditStackHandler.undoRedoHandler.GetBondGraph(tab), false);
        }
        disableRedo = !EditStackHandler.undoRedoHandler.CanDo(tab, false);
        disableUndo = !EditStackHandler.undoRedoHandler.CanDo(tab, true);
        app?.StateHasChanged();
    }

    // completes an undo/redo add selection
    public async void URDoAddSelection(string[] newObjects, int[] prevSelectedElements, string[] prevSelectedEdges, bool highlight, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("urDoAddSelection", newObjects, prevSelectedElements, prevSelectedEdges, highlight, isUndo);
        app?.StateHasChanged();
    }

    // completes an undo/redo delete selection
    public async void URDoDeleteSelection(string[] deletedObjects, string[] unselectedDeletedEdges, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        // put unselected deleted edges here where the empty list is
        await module.InvokeVoidAsync("urDoDeleteSelection", deletedObjects, unselectedDeletedEdges, isUndo);
        app?.StateHasChanged();
    }

    // completes an undo/redo change selection
    public async void URDoChangeSelection(int[] elIDsToAdd, string[] edgesToAdd, int[] elIDsToRemove, string[] edgesToRemove, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("urDoChangeSelection", elIDsToAdd, edgesToAdd, elIDsToRemove, edgesToRemove, isUndo);
        app?.StateHasChanged();
    }

    // completes an undo/redo modifier change
    public async void URDoChangeSelectionModifier(int[] elIDs, int modID, bool modVal, bool[] prevModVals, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("urDoChangeSelectionModifier", elIDs, modID, modVal, prevModVals, isUndo);
        app?.StateHasChanged();
    }

    // completes an undo/redo selection movement
    public async void URDoMoveSelection(int[] elements, double xOffset, double yOffset, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("urDoMoveSelection", elements, xOffset, yOffset, isUndo);
        app?.StateHasChanged();
    }

    // completes an undo/redo velocity change
    public async void URDoChangeSelectionVelocity(int[] elIDs, string[] edgeIDs, int velID, int[] prevVelVals, bool isUndo) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("urDoChangeSelectionVelocity", elIDs, edgeIDs, velID, prevVelVals, isUndo);
        app?.StateHasChanged();
    }

    // exports the current tab as an image
    public async void exportAsImage() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("exportAsImage");
        await module.InvokeVoidAsync("closeMenu", "File");
    }

    [JSInvokable]
    // shows the delete confirmation modal
    public static async Task<bool> showDeleteConfirmationModal(bool multiElementsSelected) {
        if (!deleteManyChecked) {
            return true;
        } else {
            if (multiElementsSelected) {
                confirmDeleteModalVisible = true;
                app?.StateHasChanged();
                return false;
            } else {
                return true;
            }
        }
    }

    // renders equations into DOM elements with given IDs
    public async void renderEquations(string[] ids, string[] eqStrings) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("renderEquations", ids, eqStrings);
    }

    [JSInvokable]
    // set whether something in the graph is being selected
    public static void SetIsSelecting(bool value) {
        Index.isSelecting = value;
        app?.StateHasChanged();
    }

    [JSInvokable]
    // set whether there is something copied to paste
    public static void SetHasCopied(bool value) {
        Index.hasCopiedSelection = value;
        app?.StateHasChanged();
    }

    [JSInvokable]
    // set whether the velocity menu is disabled
    public static void SetVelocityDisabled(bool disabled) {
        Index.velocityDisabled = disabled;
        if (disabled) {
            selectedVelocity = new List<int> {};
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // set the selected velocity in the velocity menu
    public static void SetVelocity(List<int> velocities) {
        Index.selectedVelocity = velocities;
        app?.StateHasChanged();
    }

    // change the velocity in the frontend
    public async void ChangeVelocity(int velocity) {
        Index.selectedVelocity = new List<int> { velocity };
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("setVelocity", velocity);
        app?.StateHasChanged();
    }

    [JSInvokable]
    // clear the check boxes in the modifier menu
    public static void ClearCheckboxes() {
        for (int i = 0; i < Index.checkValues.Length; i++) {
            Index.checkValues[i] = false;
            Index.checkIndeterminate[i] = false;
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // set which modifier check boxes are pressed and indicate which are intermediately checked
    public static void SetCheckboxes(int[] checkboxValues) {
        for (int i = 0; i < Index.checkValues.Length; i++) {
            Index.checkValues[i] = checkboxValues[i] != 0;
            Index.checkIndeterminate[i] = checkboxValues[i] == 1;
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // clear the check boxes which are disabled
    public static void ClearDisabled() {
        for (int i = 0; i < disabledValues.Length; i++) {
            disabledValues[i] = true;
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // sets which modifier check boxes are disabled
    public static void SetDisabled(int[] indices) {
        for (int i = 0; i < disabledValues.Length; i++) {
            disabledValues[i] = !indices.Contains(i);
        }
        app?.StateHasChanged();
    }

    [JSInvokable]
    // set the zoom slider to a given value
    public static void SetScale(double scale) {
        zoomValue = scale * 100;
        app?.StateHasChanged();
    }

    // opens the about modal
    private async void OpenAboutModal() {
        visible = true;
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Help");
    }

    // changes the zoom in tab's graph display
    private async void SliderChange(double i) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        zoomValue = i;
        await module.InvokeVoidAsync("setZoom", i);
    }

    // propegate modifier changes to the front-end
    private async void CheckChange(bool b, int i) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("setModifier", i, b);
    }

    // propegate a tab change to the front-end
    private async void TabChange(string key) {
        if (!tabsDisabled) {
            this.currTab = key;
            var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
            await module.InvokeVoidAsync("setTab", key);
            disableRedo = !EditStackHandler.undoRedoHandler.CanDo(Int32.Parse(key), false);
            disableUndo = !EditStackHandler.undoRedoHandler.CanDo(Int32.Parse(key), true);
            base.StateHasChanged();
        }
    }

    // changes which state equation is being displayed in the causal bond graph tab
    private async void ChangeEquationOption(Option selection) {
        diffIndex = selection.value;
    }

    // changes which causal bond graph is being displayed
    private async void ChangeCausalOption(Option selection) {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("displayCausalBondGraphOption", causalOptions, selection.value);
        showEquations = false;
    }

    private readonly List<string> ruleNames = new();
    private readonly double totalRules = 19.0;
    private string fileToLoad = "";
    private double loadPercent = 0;

    // initializes the page
    protected override async Task OnInitializedAsync() {
        // loads rulesets
        allRulesLoaded = false;
        ruleNames.Add("BondGraphRuleset"); //58
        ruleNames.Add("SimplificationRuleset"); //28
        ruleNames.Add("DirRuleset"); //5
        ruleNames.Add("newDirectionRuleSet_2"); //17
        ruleNames.Add("DirRuleset3"); //4
        ruleNames.Add("Simplification2"); //32
        ruleNames.Add("NewCausalityMethodRuleset"); //6
        ruleNames.Add("NewCausalityMethodRuleset_2"); //4
        ruleNames.Add("NewCausalityMethodRuleset_3"); //2
        ruleNames.Add("INVDMarkerRules"); //6
        ruleNames.Add("INVDMarkerRules_2"); //0?
        ruleNames.Add("CalibrationNewRuleset"); //12
        ruleNames.Add("CalibrationNewRuleset_2"); //0?
        ruleNames.Add("RFlagCleanRuleset"); //1
        ruleNames.Add("ICFixTotalRuleset"); //12
        ruleNames.Add("TransformerFlipRuleset"); //1
        ruleNames.Add("TransformerFlipRuleset2"); //1
        ruleNames.Add("Clean23Ruleset"); //4
        ruleNames.Add("BeforeBG-VerifyDirRuleSet"); //8

        foreach (string str in ruleNames) {
            await RuleSetMap.getInstance().loadRuleSet(str);
            loadPercent = Math.Floor((RuleSetMap.getInstance().getNumRules() / totalRules) * 100.0);
            base.StateHasChanged();
        }

        allRulesLoaded = true;
        base.StateHasChanged();
    }

    private double generateProgress = 0.0;

    // generates the series of bond graphs and displays them to the screen
    private async Task generateButtonClicked() {
        double initZoom = zoomValue;
        generateProgress = 0.0;
        generatingBondGraph = true;
        base.StateHasChanged();
        await Task.Delay(1);

        // generates the bond graphs
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("getSystemDiagram");
        generateProgress = 5.0;

        SystemDiagram? sysDiagram;
        BondGraph bondGraph;
        BondGraph item2;
        List<BondGraph> causal;

        try {
            sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
            if(GraphValidityHandler.IsInvalid(sysDiagram)) {
                throw new ArgumentException("System diagram is disconnected.");
            }
            Console.WriteLine("System diagram is connected.");
            (bondGraph, item2, causal) = BondGraphFactory.generateBondGraphs(SystemDiagram.generateSystemDiagramFromXML(sysDiagram.generateBoGLString()).convertToDesignGraph());
            //StateEquationSet set = new(causal[0]);
            //stateEquationsInitial = set.GetInitialEquations();
            //stateEquationsFinal = set.GetFinalEquations();
            //Console.WriteLine(string.Join(", ", stateEquationsFinal));
        } catch (ArgumentException e) {
            errorVisible = true;
            generatingBondGraph = false;
            errorTitle = "Error Generating Bond Graph";
            errorMessage = e.Message;
            base.StateHasChanged();
            return;
        }

        generateProgress = 25.0;

        BondGraphEmbedder unsimplifiedEmbedder = new(bondGraph);

        // lays out the bond graphs
        while (!unsimplifiedEmbedder.isOptimized()) {
            base.StateHasChanged();
            await Task.Delay(1);
            unsimplifiedEmbedder.embedBondGraph();
        }
        var unsimplified = unsimplifiedEmbedder.getBondGraph();
        generateProgress = 50.0;

        BondGraphEmbedder simplifiedEmbedder = new(item2);

        while (!simplifiedEmbedder.isOptimized()) {
            base.StateHasChanged();
            await Task.Delay(1);
            simplifiedEmbedder.embedBondGraph();
        }
        var simplified = simplifiedEmbedder.getBondGraph();
        generateProgress = 75.0;

        causalOptions.Clear();
        foreach (BondGraph g in causal) {
            BondGraph.BondGraphWrapper wrapper = new(g);
            wrapper.AssignBondLabels();
            BondGraphEmbedder causalEmbedder = new(g);

            while (!causalEmbedder.isOptimized()) {
                base.StateHasChanged();
                await Task.Delay(1);
                causalEmbedder.embedBondGraph();
            }
            causalOptions.Add(causalEmbedder.getBondGraph().convertToJson());
        }
        generateProgress = 100.0;

        // resets backend bond graphs and prints state equations
        // TODO: find global variable storing equations in Index and replace with StateEquationSet object/methods.
        EditStackHandler.undoRedoHandler.ResetBondGraphs(bondGraph, item2, causal[0]);
        try {
            stateEquationsStored = (new string[] { }).Concat(new StateEquationSet(EditStackHandler.undoRedoHandler.GetBondGraph(4)).GetFinalEquations()).ToArray();
        } catch(Exception e) {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
            stateEquationsStored = new string[] { };
        }
        equationOptions = stateEquationsStored.Select(e => e.Substring(0, e.IndexOf("="))).ToArray();
        equationSwitchOptions = Enumerable.Range(0, equationOptions.Length).ToList().Select(i => { 
            return new Option { label = "Equation for " + equationOptions[i], value = i }; 
        }).ToList();

        // displays the bond graphs on the canvas
        await module.InvokeVoidAsync("displayUnsimplifiedBondGraph", unsimplified.convertToJson());
        await module.InvokeVoidAsync("displaySimplifiedBondGraph", simplified.convertToJson());
        await module.InvokeVoidAsync("displayCausalBondGraphOption", causalOptions, 0);
        causalSwitchOptions = Enumerable.Range(0, causalOptions.Count).ToList().Select(i => { return new Option { label = "Option " + (i + 1), value = i }; }).ToList();
        generatingBondGraph = false;
        tabsDisabled = false;
        zoomValue = initZoom;
        base.StateHasChanged();
        await messageService.Success("Bond Graphs Successfully Generated.");
    }

    /// <summary>
    /// Loads a file in the example directory
    /// </summary>
    /// <param name="filename">The name of the example file without .bogl</param>
    private async void loadExample(string filename) {
        string xmlString = "";

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("https://boglweb.github.io/rules-and-examples/examples/" + filename + ".bogl");
        xmlString = await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "Help");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    private static string errorMessage = "";
    private static string errorTitle = "";

    // opens a BoGL file and loads it in the front-end
    private async void openBoGLFile() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "File");
    }

    [JSInvokable]
    // opens a system diagram file
    public static string openSystemDiagram(string file) {
        SystemDiagram sysDiagram;
        try {
            sysDiagram = SystemDiagram.generateSystemDiagramFromXML(file);
            return sysDiagram.convertToJson();
        }
        catch (ArgumentException e) {
            errorVisible = true;
            errorTitle = "Error Loading .bogl File";
            errorMessage = e.Message;
            app.StateHasChanged();
            return null;
        }
    }

    // turns a string into a Stream
    private Stream getFileStream(string fileData) {
        var testData = fileData;
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(testData));

        return fileStream;
    }

    // saves the system diagram to the user's file system
    private async void save() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "File");
        var file = await module.InvokeAsync<object>("getSystemDiagram");

        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        Stream fileStream;
        try {
            fileStream = getFileStream(sysDiagram.generateBoGLString());
        } catch (ArgumentOutOfRangeException e) {
            errorVisible = true;
            errorTitle = "Error Saving .bogl File";
            errorMessage = "Your system diagram must contain at least one element to be able to save. Please add elements to the Canvas and try saving again.";
            base.StateHasChanged();
            return;
        }
        var fileName = "SystemDiagram.bogl";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await module.InvokeVoidAsync("saveFile", fileName, streamRef);
    }

    // saves the system diagram as a .bogl file to the user's file system
    private async void saveAs() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "File");
        var file = await module.InvokeAsync<object>("getSystemDiagram");

        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        Stream fileStream;
        try {
            fileStream = getFileStream(sysDiagram.generateBoGLString());
        } catch (ArgumentOutOfRangeException e) {
            await messageService.Error("Your system diagram must contain at least one element to be able to save!");
            return; 
        }
        var fileName = "SystemDiagram.bogl";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await module.InvokeVoidAsync("saveAsFile", fileName, streamRef);
    }

    // handles the bug report button
    private void reportBugs() {
        NavManager.NavigateTo("https://docs.google.com/forms/d/e/1FAIpQLSffPWzycTP4QXjOFTU0VCcUNcLwqEurq5vl44EDE-OqM7jqzQ/viewform");
    }

    private bool allRulesLoaded { get; set; } = false;

    bool visible = false;

    // handles the ok button on the about modal
    private void handleOk() {
        visible = false;
        base.StateHasChanged();
    }

    static bool errorVisible = false;

    // handles the ok button on the error modal
    private void handleErrorOk() {
        errorVisible = false;
        base.StateHasChanged();
    }

    bool urlModalVisible = false;
    bool labelValueModalVisible = false;
    string url = "";
    string[] stateEquationsInitial = new string[] { };
    string[] stateEquationsFinal = new string[] { };

    // handles the ok button on the url modal
    private void closeUrlModal() {
        urlModalVisible = false;
        base.StateHasChanged();
    }

    // converts the system diagram to a url
    private async void generateUrl() {
        // get information from backend
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("closeMenu", "File");
        var generatedUrl = await module.InvokeAsync<object>("generateURL");
        string jsonStr = generatedUrl.ToString() ?? string.Empty;
        Root? deSerializedJson = JsonConvert.DeserializeObject<Root>(jsonStr);
        if (deSerializedJson != null) {
            jsonStr = deSerializedJson.generateUrl();
        } else {
            await messageService.Error("Invalid URL Generated");
        }

        // processes json into url
        Regex elementName = new Regex("\"elements\":");
        Regex typeName = new Regex("\"type\":");
        Regex xName = new Regex("\"x\":");
        Regex yName = new Regex("\"y\":");
        Regex velocityName = new Regex("\"velocity\":");
        Regex sourceName = new Regex("\"source\":");
        Regex idName = new Regex("\"id\":");
        Regex modifiersName = new Regex("\"modifiers\":");
        Regex targetName = new Regex("\"target\":");
        Regex bondsName = new Regex("\"bonds\"");

        jsonStr = elementName.Replace(jsonStr, "");
        jsonStr = typeName.Replace(jsonStr, "");
        jsonStr = xName.Replace(jsonStr, "");
        jsonStr = yName.Replace(jsonStr, "");
        jsonStr = velocityName.Replace(jsonStr, "");
        jsonStr = sourceName.Replace(jsonStr, "");
        jsonStr = idName.Replace(jsonStr, "");
        jsonStr = modifiersName.Replace(jsonStr, "");
        jsonStr = targetName.Replace(jsonStr, "");
        jsonStr = bondsName.Replace(jsonStr, "");

        // shortens URL
        Regex urlShort1 = new Regex("{\\[{");
        Regex urlShort2 = new Regex("\\[]");
        Regex urlShort3 = new Regex("},{");
        Regex urlShort4 = new Regex("}],:\\[{{");
        Regex urlShort5 = new Regex("}]}");
        Regex urlShort6 = new Regex("},{{");
        Regex urlShort7 = new Regex("},");
        Regex urlShort8 = new Regex(",");
        Regex urlShort9 = new Regex("hdh");
        Regex urlShort10 = new Regex("h\\[");
        Regex urlShort11 = new Regex("\\]h");

        jsonStr = urlShort4.Replace(jsonStr, "a");
        jsonStr = urlShort6.Replace(jsonStr, "b");
        jsonStr = urlShort3.Replace(jsonStr, "c");
        jsonStr = urlShort2.Replace(jsonStr, "d");
        jsonStr = urlShort5.Replace(jsonStr, "e");
        jsonStr = urlShort1.Replace(jsonStr, "f");
        jsonStr = urlShort7.Replace(jsonStr, "g");
        jsonStr = urlShort8.Replace(jsonStr, "h");
        jsonStr = urlShort9.Replace(jsonStr, "i");
        jsonStr = urlShort10.Replace(jsonStr, "j");
        jsonStr = urlShort11.Replace(jsonStr, "k");


        // adds url to modal
        url = "https://boglweb.github.io/?q=" + jsonStr;
        urlModalVisible = true;
        base.StateHasChanged();
    }

    [JSInvokable]
    // removes the compression from the url and turns it back into a json string
    public static string uncompressUrl(string compressedUrl) {
        Regex urlShort1 = new Regex("f");
        Regex urlShort2 = new Regex("d");
        Regex urlShort3 = new Regex("c");
        Regex urlShort4 = new Regex("a");
        Regex urlShort5 = new Regex("e");
        Regex urlShort6 = new Regex("b");
        Regex urlShort7 = new Regex("g");
        Regex urlShort8 = new Regex("h");
        Regex urlShort9 = new Regex("i");
        Regex urlShort10 = new Regex("j");
        Regex urlShort11 = new Regex("k");

        compressedUrl = urlShort9.Replace(compressedUrl, "hdh");
        compressedUrl = urlShort10.Replace(compressedUrl, "h[");
        compressedUrl = urlShort11.Replace(compressedUrl, "]h");
        compressedUrl = urlShort1.Replace(compressedUrl, "{[{");
        compressedUrl = urlShort2.Replace(compressedUrl, "[]");
        compressedUrl = urlShort3.Replace(compressedUrl, "},{");
        compressedUrl = urlShort4.Replace(compressedUrl, "}],:[{{");
        compressedUrl = urlShort5.Replace(compressedUrl, "}]}");
        compressedUrl = urlShort6.Replace(compressedUrl, "},{{");
        compressedUrl = urlShort7.Replace(compressedUrl, "},");
        compressedUrl = urlShort8.Replace(compressedUrl, ",");

        string[] splitCompressedUrl = compressedUrl.Split(":");

        string[] splitElements = Regex.Split(splitCompressedUrl[0].Substring(3), @"},{");
        List<string> generatedElementList = new();
        foreach (string elementString in splitElements) {
            Regex modifierRegex = new Regex(@"\[(\d,)*\d*\]");
            Match modifier = modifierRegex.Match(elementString);

            string[] splitElementString = elementString.Split(",");
            splitElementString[0] = "\"id\":" + splitElementString[0];
            splitElementString[1] = "\"x\":" + splitElementString[1];
            splitElementString[2] = "\"y\":" + splitElementString[2];
            splitElementString[3] = "\"modifiers\":" + modifier.Value;
            splitElementString[4] = "\"velocity\":" + splitElementString[4].Replace("]", "");
            splitElementString[5] = "\"type\":" + splitElementString[5];
            string generatedElementString = "{" + splitElementString[0] + "," + splitElementString[1] + "," + splitElementString[2] + "," + splitElementString[3] + "," + splitElementString[4] + "," + splitElementString[5] + "}";
            generatedElementList.Add(generatedElementString);
        }

        string builtElementString = "";
        for (int i = 0; i < generatedElementList.Count; i++) {
            builtElementString += generatedElementList[i];
            if (i != generatedElementList.Count - 1) {
                builtElementString += ",";
            }
        }
        builtElementString = builtElementString.Remove(builtElementString.Length - 1);
        builtElementString = "{\"elements\":[" + builtElementString + ",";

        string[] splitEdges = Regex.Split(splitCompressedUrl[1].Substring(2), @"},{{");
        List<string> generatedEdgeList = new();
        foreach (string edgeString in splitEdges) {
            Regex modifierRegex = new Regex(@"\[(\d,)*\d*\]");
            string edgeStringNoModifiers = modifierRegex.Replace(edgeString, "");

            string[] splitEdgeString = edgeStringNoModifiers.Split(",");
            splitEdgeString[0] = "\"source\":" + splitEdgeString[0].Replace("{", "").Replace("}", "");
            splitEdgeString[6] = "\"target\":" + splitEdgeString[6].Replace("{", "").Replace("}", "");
            splitEdgeString[12] = "\"velocity\":" + splitEdgeString[12].Replace("{", "").Replace("}", "");
            string generatedEdgeString = "{" + splitEdgeString[0] + "," + splitEdgeString[6] + "," + splitEdgeString[12] + "}";
            generatedEdgeList.Add(generatedEdgeString);
        }

        string builtEdgeString = "";
        for (int i = 0; i < generatedEdgeList.Count; i++) {
            builtEdgeString += generatedEdgeList[i];
            if (i != generatedEdgeList.Count - 1) {
                builtEdgeString += ",";
            }
        }
        builtEdgeString = builtEdgeString.Remove(builtEdgeString.Length - 1);

        compressedUrl = builtElementString + "\"edges\":[" + builtEdgeString.Remove(builtEdgeString.Length - 1) + "}]}";

        return compressedUrl;
    }

    // copies the url representation of the system diagram to the system's clipboard 
    private async void copyUrl() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeAsync<object>("textToClipboard", url);
        await messageService.Success("URL copied to clipboard!");
    }

    // runs the introjs tutorial
    private async Task runTutorial() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        // ant-menu-submenu-hidden
        await module.InvokeAsync<object>("runTutorial");
    }

    private static bool confirmDeleteModalVisible = false;

    // handles clicking the ok button on the confirm delete multiple elements modal
    private async void handleDeleteOk() {
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("delete", false);
        confirmDeleteModalVisible = false;
        base.StateHasChanged();
    }

    // handles clicking the cancel button on the confirm delete multiple element modal
    private void handleDeleteCancel() {
        confirmDeleteModalVisible = false;
        base.StateHasChanged();
    }
}